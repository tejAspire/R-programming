#6a
import os.path
import sys

fname = input("Enter the filename : ")      

if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)

infile = open(fname, "r")

lineList = infile.readlines()

for i in range(20):
    print(i+1, ":", lineList[i])
    
word = input("Enter a word : ")
cnt = 0
for line in lineList:
    cnt += line.count(word)

print("The word", word, "appears", cnt, "times in the file")
#6b
import os
import sys
import pathlib
import zipfile

dirName = input("Enter Directory name that you want to backup : ")

if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
    
curDirectory = pathlib.Path(dirName)
    
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
        archive.write(file_path, arcname=file_path.relative_to(curDirectory))
    
if os.path.isfile("myZip.zip"):
    print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")
#7a
import math

class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""
        
    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")
        
class Circle(Shape):
    def __init__(self,radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius
        
    def calcArea(self):
        self.area = math.pi * self.radius * self.radius
    
class Rectangle(Shape):
    def __init__(self,length,breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth
        
    def calcArea(self):
        self.area = self.length * self.breadth

class Triangle(Shape):
    def __init__(self,base,height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height
        
    def calcArea(self):
        self.area = self.base * self.height / 2
    

    
c1 = Circle(5)
c1.calcArea()
c1.showArea()
r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()
t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()
#7b
class Employee:
    def __init__(self):
        self.name = ""
        self.empId = ""
        self.dept = ""
        self.salary = 0
        
    def getEmpDetails(self):
        self.name = input("Enter Employee name : ")
        self.empId = input("Enter Employee ID : ")
        self.dept = input("Enter Employee Dept : ")
        self.salary = int(input("Enter Employee Salary : "))
        
    def showEmpDetails(self):
        print("Employee Details")
        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)
        
    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))
        print("Updated Salary", self.salary)
        

e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary()
#8
#8
class PaliStr:
    def __init__(self):
        self.isPali = False
        
    def chkPalindrome(self, myStr):
        if myStr == myStr[::-1]:
            self.isPali = True
        else:
            self.isPali = False
            
        return self.isPali
            
class PaliInt(PaliStr):
    def __init__(self):
        self.isPali = False
        
    def chkPalindrome(self, val):
        temp = val
        rev = 0
        while temp != 0:
            dig = temp % 10
            rev = (rev*10) + dig
            temp = temp //10
            
        if val == rev:
            self.isPali = True
        else:
            self.isPali = False
        
        return self.isPali

st = input("Enter a string : ")

stObj = PaliStr()
if stObj.chkPalindrome(st):
    print("Given string is a Palindrome")
else:
    print("Given string is not a Palindrome")

val = int(input("Enter a integer : "))    

intObj = PaliInt()
if intObj.chkPalindrome(val):
    print("Given integer is a Palindrome")
else:
    print("Given integer is not a Palindrome")
#9a
#9a
import os
import requests
from bs4 import BeautifulSoup

# Set the initial URL and create the comics folder
url = 'https://xkcd.com/1/'
comics_folder = 'xkcd_comics'
os.makedirs(comics_folder, exist_ok=True)

# Function to download and save a comic
def download_comic(url):
    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')

    comic_elem = soup.select('#comic img')
    if comic_elem:
        comic_url = 'https:' + comic_elem[0].get('src')
        image_response = requests.get(comic_url)
        image_response.raise_for_status()
        image_filename = os.path.basename(comic_url)
        image_path = os.path.join(comics_folder, image_filename)
        
        with open(image_path, 'wb') as image_file:
            image_file.write(image_response.content)
        
        print(f'Downloaded: {image_filename}')
    else:
        print('Comic image not found.')

# Loop through all comics
while url:
    download_comic(url)

    # Get URL of the previous comic
    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')
    prev_link = soup.select('a[rel="prev"]')
    url = 'https://xkcd.com' + prev_link[0].get('href') if prev_link else None

print('All comics downloaded.')
#9b
from openpyxl import Workbook
from openpyxl.styles import Font

wb = Workbook()
sheet = wb.active
sheet.title = "Language"
wb.create_sheet(title="Capital")

lang = ["Kannada", "Telugu", "Tamil"]
state = ["Karnataka", "Telangana", "Tamil Nadu"]
capital = ["Bengaluru", "Hyderabad", "Chennai"]
code = ['KA', 'TS', 'TN']

# Set header row and apply bold font
sheet.cell(row=1, column=1).value = "State"
sheet.cell(row=1, column=2).value = "Language"
sheet.cell(row=1, column=3).value = "Code"
ft = Font(bold=True)

for row in sheet["A1:C1"]:
    for cell in row:
        cell.font = ft

# Fill in data for the "Language" sheet
for i in range(2, 5):
    sheet.cell(row=i, column=1).value = state[i - 2]
    sheet.cell(row=i, column=2).value = lang[i - 2]
    sheet.cell(row=i, column=3).value = code[i - 2]

wb.save("demo.xlsx")

# Switch to the "Capital" sheet
sheet = wb["Capital"]

# Set header row and apply bold font
sheet.cell(row=1, column=1).value = "State"
sheet.cell(row=1, column=2).value = "Capital"
sheet.cell(row=1, column=3).value = "Code"
ft = Font(bold=True)

for row in sheet["A1:C1"]:
    for cell in row:
        cell.font = ft

# Fill in data for the "Capital" sheet
for i in range(2, 5):
    sheet.cell(row=i, column=1).value = state[i - 2]
    sheet.cell(row=i, column=2).value = capital[i - 2]
    sheet.cell(row=i, column=3).value = code[i - 2]

wb.save("demo.xlsx")
#10a
from PyPDF2 import PdfWriter, PdfReader

num = int(input("Enter page number you want to combine from multiple documents "))
pdf1 = open('10a&10b (2).pdf', 'rb')
pdf2 = open('10b (3) (5).pdf', 'rb')
pdf_writer = PdfWriter()

pdf1_reader = PdfReader(pdf1)
page = pdf1_reader.pages[num - 1]
pdf_writer.add_page(page)

pdf2_reader = PdfReader(pdf2)
page = pdf2_reader.pages[num - 1]
pdf_writer.add_page(page)

with open('output.pdf', 'wb') as output:
    pdf_writer.write(output)
#10b
import requests

def fetch_weather_data(api_key, city):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": api_key,
        "units": "metric"  # You can change this to "imperial" for Fahrenheit
    }
    response = requests.get(base_url, params=params)
    weather_data = response.json()
    return weather_data

def display_weather_data(weather_data):
    print("Weather in", weather_data["name"])
    print("Temperature:", weather_data["main"]["temp"], "Â°C")
    print("Description:", weather_data["weather"][0]["description"])

if __name__ == "__main__":
    # Replace "your_actual_api_key_here" with the provided example API key
    api_key = "b2754f466b582eed76743bc98c50b04d"
    city = input("Enter city name: ")
    weather_data = fetch_weather_data(api_key, city)
    if "cod" in weather_data and weather_data["cod"] == 200:
        display_weather_data(weather_data)
    else:
        print("City not found or error fetching weather data.")



6a(edited)

def display_first_n_lines(file_name, n):
 try:
 with open(file_name, 'r') as file:
 lines = file.readlines()
 for i in range(n):
 if i < len(lines):
 print(lines[i].strip()) # strip() to remove newline characters
 else:
 break
 except FileNotFoundError:
 print("File not found.")
def find_word_frequency(file_name, word):
 try:
 with open(file_name, 'r') as file:
 content = file.read().lower()
 word_count = content.count(word.lower())
 print(f"The word '{word}' occurs {word_count} times in the file.")
 except FileNotFoundError:
 print("File not found.")
if _name_ == "_main_":
 file_name = input("Enter the file name: ")
 # Display the first N lines of the file
 n = int(input("Enter the number of lines to display: "))
 print("\nFirst N lines of the file:")
 display_first_n_lines(file_name, n)
 # Find the frequency of a word in the file
 search_word = input("\nEnter a word to find its frequency: ")
 find_word_frequency(file_name, search_word)
